diff --git a/common/socket.c b/common/socket.c
index a5f9a33..6c84451 100644
--- a/common/socket.c
+++ b/common/socket.c
@@ -63,6 +63,123 @@ static int wsa_init = 0;
 #define ETIMEDOUT 138
 #endif
 
+#ifdef WIN32
+static struct sockaddr *
+dupaddr(const sockaddr_gen * src)
+{
+    sockaddr_gen * d = malloc(sizeof(*d));
+
+    if (d) {
+	memcpy(d, src, sizeof(*d));
+    }
+
+    return (struct sockaddr *) d;
+}
+
+int getifaddrs(struct ifaddrs **ifpp)
+{
+    SOCKET s = INVALID_SOCKET;
+    size_t il_len = 8192;
+    int ret = -1;
+    INTERFACE_INFO *il = NULL;
+
+    *ifpp = NULL;
+
+    s = socket(AF_INET, SOCK_DGRAM, 0);
+    if (s == INVALID_SOCKET)
+	return -1;
+
+    for (;;) {
+	DWORD cbret = 0;
+
+	il = malloc(il_len);
+	if (!il)
+	    break;
+
+	ZeroMemory(il, il_len);
+
+	if (WSAIoctl(s, SIO_GET_INTERFACE_LIST, NULL, 0,
+		     (LPVOID) il, (DWORD) il_len, &cbret,
+		     NULL, NULL) == 0) {
+	    il_len = cbret;
+	    break;
+	}
+
+	free (il);
+	il = NULL;
+
+	if (WSAGetLastError() == WSAEFAULT && cbret > il_len) {
+	    il_len = cbret;
+	} else {
+	    break;
+	}
+    }
+
+    if (!il)
+	goto _exit;
+
+    {
+	size_t n = il_len / sizeof(INTERFACE_INFO);
+	size_t i;
+
+	for (i = 0; i < n; i++ ) {
+	    struct ifaddrs *ifp;
+
+	    ifp = malloc(sizeof(*ifp));
+	    if (ifp == NULL)
+		break;
+
+	    ZeroMemory(ifp, sizeof(*ifp));
+
+	    ifp->ifa_next = NULL;
+	    ifp->ifa_name = NULL;
+	    ifp->ifa_flags = il[i].iiFlags;
+	    ifp->ifa_addr = dupaddr(&il[i].iiAddress);
+	    ifp->ifa_netmask = dupaddr(&il[i].iiNetmask);
+	    ifp->ifa_broadaddr = dupaddr(&il[i].iiBroadcastAddress);
+	    ifp->ifa_data = NULL;
+
+	    *ifpp = ifp;
+	    ifpp = &ifp->ifa_next;
+	}
+
+	if (i == n)
+	    ret = 0;
+    }
+
+ _exit:
+
+    if (s != INVALID_SOCKET)
+	closesocket(s);
+
+    if (il)
+	free (il);
+
+    return ret;
+}
+
+void freeifaddrs(struct ifaddrs *ifp)
+{
+    struct ifaddrs *p, *q;
+
+    for(p = ifp; p; ) {
+	if (p->ifa_name)
+	    free(p->ifa_name);
+	if(p->ifa_addr)
+	    free(p->ifa_addr);
+	if(p->ifa_dstaddr)
+	    free(p->ifa_dstaddr);
+	if(p->ifa_netmask)
+	    free(p->ifa_netmask);
+	if(p->ifa_data)
+	    free(p->ifa_data);
+	q = p;
+	p = p->ifa_next;
+	free(q);
+    }
+}
+#endif
+
 static int verbose = 0;
 
 void socket_set_verbose(int level)
@@ -161,7 +278,7 @@ int socket_create_unix(const char *filename)
 		return -1;
 	}
 
-	if (listen(sock, 10) < 0) {
+	if (listen(sock, 100) < 0) {
 		perror("listen");
 		socket_close(sock);
 		return -1;
@@ -594,7 +711,7 @@ int socket_connect(const char *addr, uint16_t port)
 	memset(&hints, '\0', sizeof(struct addrinfo));
 	hints.ai_family = AF_UNSPEC;
 	hints.ai_socktype = SOCK_STREAM;
-	hints.ai_flags = 0;
+	hints.ai_flags = AI_NUMERICSERV;
 	hints.ai_protocol = IPPROTO_TCP;
 
 	sprintf(portstr, "%d", port);
@@ -761,14 +878,9 @@ int socket_accept(int fd, uint16_t port)
 	socklen_t addr_len;
 #endif
 	int result;
-	struct sockaddr_in addr;
-
-	memset(&addr, 0, sizeof(addr));
-	addr.sin_family = AF_INET;
-	addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
-	addr.sin_port = htons(port);
-
+	struct sockaddr_storage addr;
 	addr_len = sizeof(addr);
+
 	result = accept(fd, (struct sockaddr*)&addr, &addr_len);
 
 	return result;
@@ -825,6 +937,10 @@ int socket_receive_timeout(int fd, void *data, size_t length, int flags,
 int socket_send(int fd, void *data, size_t length)
 {
 	int flags = 0;
+	int res = socket_check_fd(fd, FDM_WRITE, 1000);
+	if (res <= 0) {
+		return res;
+	}
 #ifdef MSG_NOSIGNAL
 	flags |= MSG_NOSIGNAL;
 #endif
diff --git a/common/socket.h b/common/socket.h
index 38eeddf..d0c937b 100644
--- a/common/socket.h
+++ b/common/socket.h
@@ -37,6 +37,26 @@ typedef enum fd_mode fd_mode;
 #define SHUT_RD SD_READ
 #define SHUT_WR SD_WRITE
 #define SHUT_RDWR SD_BOTH
+#define IFF_POINTOPOINT IFF_POINTTOPOINT
+#define IFF_RUNNING 0x0040
+#undef ifa_dstaddr
+
+struct ifaddrs {
+    struct ifaddrs *ifa_next;
+    char *ifa_name;
+    unsigned int ifa_flags;
+    struct sockaddr *ifa_addr;
+    struct sockaddr *ifa_netmask;
+    struct sockaddr *ifa_dstaddr;
+    void *ifa_data;
+};
+
+#ifndef ifa_broadaddr
+#define ifa_broadaddr ifa_dstaddr
+#endif
+
+int getifaddrs(struct ifaddrs **ifpp);
+void freeifaddrs(struct ifaddrs *ifp);
 #else
 #include <sys/socket.h>
 #endif
